{"version":3,"sources":["components/TaskBanner.js","components/TaskCreator.js","components/TaskRow.js","components/VisibilityControl.js","App.js","reportWebVitals.js","index.js"],"names":["TaskBanner","props","className","userName","taskItems","filter","t","done","length","TaskCreator","useState","newTaskName","setNewTaskName","type","placeholder","value","onChange","e","target","onClick","createNew","TaskRow","task","name","checked","toggleTask","VisibilityControl","isChecked","callback","htmlFor","description","App","setUserName","setTaskItems","showCompleted","setShowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","map","TaskTableRows","doneValue","taskName","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAWeA,EAPI,SAACC,GAAD,OACjB,qBAAIC,UAAU,wCAAd,UACGD,EAAME,SADT,gBACgCF,EAAMG,UAAUC,QAAO,SAACC,GAAD,OAAQA,EAAEC,QAAMC,OAAQ,IAD/E,yBC6BaC,EA/BK,SAACR,GAAU,MAESS,mBAAS,IAFlB,mBAEtBC,EAFsB,KAETC,EAFS,KAa7B,OACE,sBAAKV,UAAU,mBAAf,UACE,uBACEW,KAAK,OACLX,UAAU,eACVY,YAAY,kDACZC,MAAOJ,EACPK,SAfqB,SAACC,GAAD,OAAOL,EAAeK,EAAEC,OAAOH,UAiBtD,qBAAKb,UAAU,qBAAf,SACE,wBAAQA,UAAU,kBAAkBiB,QAfpB,WACpBlB,EAAMmB,UAAUT,GAChBC,EAAe,KAaX,2BCVOS,EAbC,SAACpB,GAAD,OACd,+BACE,6BAAKA,EAAMqB,KAAKC,OAChB,6BACE,uBACEV,KAAK,WACLW,QAASvB,EAAMqB,KAAKf,KACpBS,SAAU,kBAAMf,EAAMwB,WAAWxB,EAAMqB,aANpCrB,EAAMqB,KAAKC,OCcPG,EAdW,SAACzB,GACzB,OACE,sBAAKC,UAAU,aAAf,UACE,uBACEW,KAAK,WACLX,UAAU,mBACVsB,QAASvB,EAAM0B,UACfX,SAAU,SAACC,GAAD,OAAOhB,EAAM2B,SAASX,EAAEC,OAAOM,YAE3C,wBAAOK,QAAQ,mBAAf,qBAA2C5B,EAAM6B,mBC+FxCC,MAtGf,WAAe,MAGmBrB,mBAAS,OAH5B,mBAGNP,EAHM,KAGI6B,EAHJ,OAKqBtB,mBAAS,CACzC,CAAEa,KAAM,YAAahB,MAAM,GAC3B,CAAEgB,KAAM,YAAahB,MAAM,GAC3B,CAAEgB,KAAM,aAAchB,MAAM,KARjB,mBAKNH,EALM,KAKK6B,EALL,OAY6BvB,oBAAS,GAZtC,mBAYNwB,EAZM,KAYSC,EAZT,KAiBbC,qBAAU,WACR,IAAIC,EAAOC,aAAaC,QAAQ,SACpB,MAARF,EACFJ,EAAaO,KAAKC,MAAMJ,KAExBL,EAAY,YACZC,EAAa,CACX,CAAEV,KAAM,gCAA8BhB,MAAM,GAC5C,CAAEgB,KAAM,yBAAoBhB,MAAM,GAClC,CAAEgB,KAAM,kBAAmBhB,MAAM,KAEnC4B,GAAiB,MAElB,IAIHC,qBAAU,WAERE,aAAaI,QAAQ,QAASF,KAAKG,UAAUvC,MAC5C,CAACA,IAGJ,IAAMqB,EAAa,SAACH,GAAD,OACjBW,EAEE7B,EAAUwC,KAAI,SAACtC,GAAD,OAAQA,EAAEiB,OAASD,EAAKC,KAAhB,2BAA4BjB,GAA5B,IAA+BC,MAAOD,EAAEC,OAASD,OAIrEuC,EAAgB,SAACC,GAAD,OACpB1C,EAEGC,QAAO,SAACiB,GAAD,OAAUA,EAAKf,OAASuC,KAE/BF,KAAI,SAACtB,GAAD,OACH,cAAC,EAAD,CAASA,KAAMA,EAAsBG,WAAYA,GAAvBH,EAAKC,UAYrC,OACE,gCACE,cAAC,EAAD,CAAYpB,SAAUA,EAAUC,UAAWA,IAC3C,sBAAKF,UAAU,8BAAf,UACE,cAAC,EAAD,CAAakB,UAZD,SAAC2B,GAEZ3C,EAAU4C,MAAK,SAAC1C,GAAD,OAAOA,EAAEiB,OAASwB,MAEpCd,EAAa,GAAD,mBAAK7B,GAAL,CAAgB,CAAEmB,KAAMwB,EAAUxC,MAAM,SASlD,wBAAOL,UAAU,qCAAjB,UACE,gCACE,+BACE,gDACA,6CAGJ,gCAAQ2C,GAAc,QAExB,qBAAK3C,UAAU,0CAAf,SACE,cAAC,EAAD,CACE4B,YAAY,mBACZH,UAAWO,EACXN,SAAU,SAACJ,GAAD,OAAaW,EAAiBX,QAG3CU,GACC,wBAAOhC,UAAU,sCAAjB,UACE,gCACE,+BACE,gDACA,gDAGJ,gCAAQ2C,GAAc,eCxFnBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.be830ed3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//título de la app\r\n//muestra nombre de usuario y tareas por cumplir\r\nconst TaskBanner = (props) => (\r\n  <h4 className=\"bg-primary text-white text-center p-4\">\r\n    {props.userName}'s Task App ({props.taskItems.filter((t) => !t.done).length}{\" \"}\r\n    tareas pendientes)\r\n  </h4>\r\n);\r\n\r\nexport default TaskBanner;\r\n","import React, { useState } from \"react\";\r\n\r\n//creación de una nueva tarea\r\nconst TaskCreator = (props) => {\r\n  //estado del input para crear nueva tarea\r\n  const [newTaskName, setNewTaskName] = useState(\"\");\r\n\r\n  //actualizo el estado del input\r\n  const updateNewTaskValue = (e) => setNewTaskName(e.target.value);\r\n\r\n  //muestro la nueva tarea y limpio el input\r\n  const createNewTask = () => {\r\n    props.createNew(newTaskName);\r\n    setNewTaskName(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-group mb-3\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        placeholder=\"Escribe la tarea que quieras agregar al listado\"\r\n        value={newTaskName}\r\n        onChange={updateNewTaskValue}\r\n      />\r\n      <div className=\"input-group-append\">\r\n        <button className=\"btn btn-primary\" onClick={createNewTask}>\r\n          Agregar\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskCreator;\r\n","import React from \"react\";\r\n\r\n//renderizo tarea individualmente\r\nconst TaskRow = (props) => (\r\n  <tr key={props.task.name}>\r\n    <td>{props.task.name}</td>\r\n    <td>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={props.task.done}\r\n        onChange={() => props.toggleTask(props.task)}\r\n      />\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nexport default TaskRow;\r\n","import React from \"react\";\r\n\r\n//controla su propio estado\r\n//del cual derivará que se muestre o no la 2da tabla\r\nconst VisibilityControl = (props) => {\r\n  return (\r\n    <div className=\"form-check\">\r\n      <input\r\n        type=\"checkbox\"\r\n        className=\"form-check-input\"\r\n        checked={props.isChecked}\r\n        onChange={(e) => props.callback(e.target.checked)}\r\n      />\r\n      <label htmlFor=\"form-check-label\">Muestra {props.description}</label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VisibilityControl;\r\n","import React, { useEffect, useState } from \"react\";\nimport TaskBanner from \"./components/TaskBanner\";\nimport TaskCreator from \"./components/TaskCreator\";\nimport TaskRow from \"./components/TaskRow\";\nimport VisibilityControl from \"./components/VisibilityControl\";\n\nfunction App() {\n  //guardo en un estado quien es el propietario de las tareas\n  // eslint-disable-next-line\n  const [userName, setUserName] = useState(\"Cyn\");\n  //guardo en otro estado las tareas\n  const [taskItems, setTaskItems] = useState([\n    { name: \"Tarea Uno\", done: false },\n    { name: \"Tarea Dos\", done: false },\n    { name: \"Tarea Tres\", done: true },\n  ]);\n  //guardo en otro estado la validación\n  //para mostrar otra tabla con las tareas cumplidas\n  const [showCompleted, setShowCompleted] = useState(true);\n\n  //apenas renderice la app, LocalStorage comprobará si hay tareas guardadas\n  //de haber: definir tareas guardadas\n  //de no haber nada: dar datos de ejemplo\n  useEffect(() => {\n    let data = localStorage.getItem(\"tasks\");\n    if (data != null) {\n      setTaskItems(JSON.parse(data));\n    } else {\n      setUserName(\"Invitado\"); //nombre usuario por defecto\n      setTaskItems([\n        { name: \"Añade una tarea al listado\", done: false },\n        { name: \"Te será muy útil\", done: false },\n        { name: \"Prueba esta app\", done: true },\n      ]); //tareas de ejemplo\n      setShowCompleted(true); //se muestra todo por defecto\n    }\n  }, []); //solo se realiza una vez, al iniciar la app\n\n  //guardo tareas en el LocalStorage\n  //cada vez que el TaskItems cambie\n  useEffect(() => {\n    //convierto el array taskItems a string para guardarlo en tasks\n    localStorage.setItem(\"tasks\", JSON.stringify(taskItems));\n  }, [taskItems]);\n\n  //modifica el estado de las tareas\n  const toggleTask = (task) =>\n    setTaskItems(\n      //solo se le modifica a la tarea que coincida con la solicitada\n      taskItems.map((t) => (t.name === task.name ? { ...t, done: !t.done } : t))\n    );\n\n  //renderiza una fila de la tabla por tarea según estado\n  const TaskTableRows = (doneValue) =>\n    taskItems\n      //primero se filtra el estado de la tarea\n      .filter((task) => task.done === doneValue)\n      //se renderizan solo las tareas del estado solicitado\n      .map((task) => (\n        <TaskRow task={task} key={task.name} toggleTask={toggleTask} />\n      ));\n\n  //crear nueva tarea\n  const createNew = (taskName) => {\n    //compruebo que la tarea no sea una ya existente\n    if (!taskItems.find((t) => t.name === taskName)) {\n      //nueva tarea con estado de incumplida por defecto\n      setTaskItems([...taskItems, { name: taskName, done: false }]);\n    }\n  };\n\n  return (\n    <div>\n      <TaskBanner userName={userName} taskItems={taskItems} />\n      <div className=\"container-fluid text-center\">\n        <TaskCreator createNew={createNew} />\n        <table className=\"table table-striped table-bordered\">\n          <thead>\n            <tr>\n              <th>Descripción</th>\n              <th>Estado</th>\n            </tr>\n          </thead>\n          <tbody>{TaskTableRows(false)}</tbody>\n        </table>\n        <div className=\"bg-secondary-text-white text-center p-2\">\n          <VisibilityControl\n            description=\"tareas cumplidas\"\n            isChecked={showCompleted}\n            callback={(checked) => setShowCompleted(checked)}\n          />\n        </div>\n        {showCompleted && (\n          <table className=\"table table-stripped table-bordered\">\n            <thead>\n              <tr>\n                <th>Descripción</th>\n                <th>Realizada</th>\n              </tr>\n            </thead>\n            <tbody>{TaskTableRows(true)}</tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}